{"version":3,"sources":["components/BareMinimumRequirements/Toggle.js","components/BareMinimumRequirements/Modal.js","components/BareMinimumRequirements/Tag.js","components/AdvancedChallenges/Autocomplete.js","components/AdvancedChallenges/ClickToEdit.js","components/BareMinimumRequirements/Tab.js","App.js","index.js"],"names":["ToggleContainer","styled","div","Desc","Toggle","useState","isOn","setisOn","onClick","className","ModalContainer","ModalBackdrop","ModalBtn","button","ModalView","attrs","props","role","Modal","isOpen","setIsOpen","openModalHandler","event","stopPropagation","TagsInput","Tag","tags","setTags","id","map","tag","index","indexToRemove","filter","el","type","onKeyUp","key","includes","target","value","addTags","placeholder","deselectedOptions","boxShadow","InputContainer","DropDownContainer","ul","Autocomplete","hasText","setHasText","inputValue","setInputValue","options","setOptions","useEffect","onChange","handleComboBox","clickedOption","DropDown","selected","option","idx","InputBox","InputEdit","input","InputView","MyInput","inputEl","handleValueChange","useRef","isEditMode","newValue","setNewValue","current","focus","ref","cache","ClickToEdit","name","setName","age","setAge","TabMenu","Tab","currentTab","setCurrentTab","menuArr","content","selectMenuHandler","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAGMA,EAAkBC,IAAOC,IAAV,8mCAwCfC,EAAOF,IAAOC,IAAV,iKAMGE,EAAS,WACpB,MAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAOA,OACE,qCACE,eAACP,EAAD,CAAiBQ,QAPC,WAEpBD,GAASD,IAKP,UACE,qBAAKG,UAAS,2BAAsBH,EAAO,kBAAoB,MAC/D,qBAAKG,UAAS,wBAAmBH,EAAO,kBAAoB,SAG7DA,EAAO,cAACH,EAAD,+BAAgC,cAACA,EAAD,oCC7DjCO,EAAiBT,IAAOC,IAAV,8RASdS,EAAgBV,IAAOC,IAAV,uZAgBbU,EAAWX,IAAOY,OAAV,iLAURC,EAAYb,IAAOC,IAAIa,OAAM,SAACC,GAAD,MAAY,CAEpDC,KAAM,YAFiBhB,CAAH,sbAwBTiB,EAAQ,WACnB,MAA4Bb,oBAAS,GAArC,mBAAOc,EAAP,KAAeC,EAAf,KAEMC,EAAmB,WAEvBD,GAAWD,IAGb,OACE,mCACE,eAACT,EAAD,WACE,cAACE,EAAD,CACEJ,QAASa,EADX,SAIGF,EAAS,UAAY,eAGvBA,EACC,cAACR,EAAD,CAAeH,QAASa,EAAxB,SACE,eAACP,EAAD,CACEN,QAAS,SAACc,GACRA,EAAMC,mBAFV,UAKE,qBAAKd,UAAU,YAAYD,QAASa,EAApC,kBAGA,yDAGF,W,QCxFCG,EAAYvB,IAAOC,IAAV,yrCA8DTuB,EAAM,WACjB,IAEA,EAAwBpB,mBAFJ,CAAC,aAAc,cAEnC,mBAAOqB,EAAP,KAAaC,EAAb,KAsBA,OACE,mCACE,eAACH,EAAD,WACE,oBAAII,GAAG,OAAP,SACGF,EAAKG,KAAI,SAACC,EAAKC,GAAN,OACR,qBAAgBtB,UAAU,MAA1B,UACE,sBAAMA,UAAU,YAAhB,SAA6BqB,IAC7B,sBACErB,UAAU,iBACVD,QAAS,kBA9BHwB,EA8BoBD,OA5BtCJ,EAAQD,EAAKO,QAAO,SAACC,EAAIH,GAAL,OAAeA,IAAUC,MAF5B,IAACA,GA4BR,iBAFOD,QAWb,uBACEtB,UAAU,YACV0B,KAAK,OACLC,QAAS,SAACd,IAnCF,SAACA,GAOC,UAAdA,EAAMe,KACLX,EAAKY,SAAShB,EAAMiB,OAAOC,QACL,KAAvBlB,EAAMiB,OAAOC,QAEbb,EAAQ,GAAD,mBAAKD,GAAL,CAAWJ,EAAMiB,OAAOC,SAC/BlB,EAAMiB,OAAOC,MAAQ,IAwBfC,CAAQnB,IAEVoB,YAAY,kCC/GhBC,EAAoB,CACxB,SACA,UACA,QACA,UACA,cACA,eACA,qBACA,sBACA,sBACA,sBAIIC,EAAY,gCAILC,EAAiB5C,IAAOC,IAAV,0fAFE,sBAcX0C,GAkBLE,EAAoB7C,IAAO8C,GAAV,0dAedH,GAQHI,EAAe,WAO1B,MAA8B3C,oBAAS,GAAvC,mBAAO4C,EAAP,KAAgBC,EAAhB,KACA,EAAoC7C,mBAAS,IAA7C,mBAAO8C,EAAP,KAAmBC,EAAnB,KACA,EAA8B/C,mBAASsC,GAAvC,mBAAOU,EAAP,KAAgBC,EAAhB,KAGAC,qBAAU,WACW,KAAfJ,GACFD,GAAW,KAEZ,CAACC,IA2DJ,OACE,sBAAK1C,UAAU,uBAAf,UACE,eAACoC,EAAD,WACE,uBACEV,KAAK,OACLK,MAAOW,EACPK,SA9DkB,SAAClC,GACzB8B,EAAc9B,EAAMiB,OAAOC,OAC3BU,GAAW,GACXI,EACEX,EAAkBV,QAAO,SAACC,GAAD,OAAQA,EAAGI,SAAShB,EAAMiB,OAAOC,cA8DxD,qBAAK/B,UAAU,gBAAgBD,QA3BL,WAC9B4C,EAAc,KA0BV,qBAIDH,EACC,cAAC,EAAD,CAAUQ,eAhDY,SAACC,GAC3BN,EAAcM,GACdJ,EAAW,CAACI,KA8CuCL,QAASA,IACtD,SAKGM,EAAW,SAAC,GAA2C,IAAzCN,EAAwC,EAAxCA,QAASI,EAA+B,EAA/BA,eAAgBG,EAAe,EAAfA,SAClD,OACE,cAACd,EAAD,UACGO,EAAQxB,KAAI,SAACgC,EAAQC,GACpB,OACE,oBAEEtD,QAAS,kBAAMiD,EAAeI,IAC9BpD,UAAWmD,IAAaE,EAAM,WAAa,GAH7C,SAKGD,GAJIC,SC7KJC,EAAW9D,IAAOC,IAAV,yLAUR8D,EAAY/D,IAAOgE,MAAV,+GAOTC,EAAYjE,IAAOC,IAAV,4IAUTiE,EAAU,SAAC,GAAkC,IAAhC3B,EAA+B,EAA/BA,MAClB4B,GADiD,EAAxBC,kBACfC,iBAAO,OACvB,EAAkCjE,oBAAS,GAA3C,mBAAOkE,EAAP,KACA,GADA,KACgClE,mBAASmC,IAAzC,mBAAOgC,EAAP,KAAiBC,EAAjB,KAEAlB,qBAAU,WACJgB,GACFH,EAAQM,QAAQC,UAEjB,CAACJ,IAEJhB,qBAAU,WACRkB,EAAYjC,KACX,CAACA,IAeJ,OACE,cAACuB,EAAD,UACGQ,EACC,cAACP,EAAD,CACE7B,KAAK,OACLK,MAAOgC,EACPI,IAAKR,IAKP,+BAEEI,OAMJK,EACE,qBADFA,EAEC,GAGMC,EAAc,WACzB,MAAwBzE,mBAASwE,GAAjC,mBAAOE,EAAP,KAAaC,EAAb,KACA,EAAsB3E,mBAASwE,GAA/B,mBAAOI,EAAP,KAAYC,EAAZ,KAEA,OACE,qCACE,eAAChB,EAAD,WACE,iDACA,cAAC,EAAD,CAAS1B,MAAOuC,EAAMV,kBAAmB,SAACG,GAAD,OAAcQ,EAAQR,SAEjE,eAACN,EAAD,WACE,iDACA,cAAC,EAAD,CAAS1B,MAAOyC,EAAKZ,kBAAmB,SAACG,GAAD,OAAcU,EAAOV,SAE/D,cAACN,EAAD,UACE,sBAAKzD,UAAU,OAAf,0BAA0BsE,EAA1B,iBAAoCE,WC5FtCE,EAAUlF,IAAO8C,GAAV,0iBAgCP5C,EAAOF,IAAOC,IAAV,mDAIGkF,EAAM,WAGjB,MAAoC/E,mBAAS,GAA7C,mBAAOgF,EAAP,KAAmBC,EAAnB,KAEMC,EAAU,CACd,CAAER,KAAM,OAAQS,QAAS,gBACzB,CAAET,KAAM,OAAQS,QAAS,gBACzB,CAAET,KAAM,OAAQS,QAAS,mBAS3B,OACE,mCACE,gCACE,eAACL,EAAD,WAIGI,EAAQ1D,KAAI,SAACK,EAAIH,GAChB,OACE,oBAEEtB,UAAW4E,IAAetD,EAAQ,kBAAoB,UACtDvB,QAAS,kBAlBG,SAACuB,GAGzBuD,EAAcvD,GAea0D,CAAkB1D,IAHnC,SAKGG,EAAG6C,MAJChD,MAPb,OAiBA,cAAC,EAAD,UAEE,4BAAIwD,EAAQF,GAAYG,kBCtCnBE,G,MAjCH,WACV,OACE,mCACE,sBAAK9D,GAAG,YAAR,UACE,qBAAKA,GAAG,QAAR,oCACA,sBAAKnB,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,mBACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,oBACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,iBACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,iBACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,0BACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,MAAf,UACE,qBAAKA,UAAU,YAAf,yBACA,cAAC,EAAD,cChCVkF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.127d3d05.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst ToggleContainer = styled.div`\n  position: relative;\n  margin-top: 8rem;\n  left: 47%;\n  cursor: pointer;\n\n  > .toggle-container {\n    width: 50px;\n    height: 24px;\n    border-radius: 30px;\n    background-position: right;\n    background: linear-gradient(to left, #8b8b8b 50%, blue 50%) right;\n    background-size: 200%;\n    transition: 1s;\n    // TODO : .toggle--checked 클래스가 활성화 되었을 경우의 CSS를 구현합니다.\n    &.toggle--checked {\n      background-position: left;\n      background: linear-gradient(to right, blue 50%, #8b8b8b 50%) left;\n      background-size: 200%;\n      transition: 1s;\n    }\n  }\n\n  > .toggle-circle {\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    background-color: #ffffff;\n    transition: 1s;\n    // TODO : .toggle--checked 클래스가 활성화 되었을 경우의 CSS를 구현합니다.\n    &.toggle--checked {\n      left: 27px;\n      transition: 1s;\n    }\n  }\n`;\n\nconst Desc = styled.div`\n  // TODO : 설명 부분의 CSS를 구현합니다.\n  display: flex;\n  justify-content: center;\n`;\n\nexport const Toggle = () => {\n  const [isOn, setisOn] = useState(false);\n\n  const toggleHandler = () => {\n    // TODO : isOn의 상태를 변경하는 메소드를 구현합니다.\n    setisOn(!isOn);\n  };\n\n  return (\n    <>\n      <ToggleContainer onClick={toggleHandler}>\n        <div className={`toggle-container ${isOn ? \"toggle--checked\" : \"\"}`} />\n        <div className={`toggle-circle ${isOn ? \"toggle--checked\" : \"\"}`} />\n        {/* TIP : Toggle Switch가 ON인 상태일 경우에만 toggle--checked 클래스를 div 엘리먼트 2개에 모두 추가합니다. 조건부 스타일링을 활용하세요. */}\n      </ToggleContainer>\n      {isOn ? <Desc>Toggle Switch ON</Desc> : <Desc>Toggle Switch OFF</Desc>}\n      {/* TIP:  Toggle Switch가 ON인 상태일 경우에 Desc 컴포넌트 내부의 텍스트를 'Toggle Switch ON'으로, 그렇지 않은 경우 'Toggle Switch OFF'가 됩니다. 조건부 렌더링을 활용하세요. */}\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nexport const ModalContainer = styled.div`\n  // TODO : Modal을 구현하는데 전체적으로 필요한 CSS를 구현합니다.\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100%;\n  position: relative;\n`;\n\nexport const ModalBackdrop = styled.div`\n  // TODO : Modal이 떴을 때의 배경을 깔아주는 CSS를 구현합니다.\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  left: 0;\n  align-items: center;\n  justify-content: center;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 1;\n`;\n\nexport const ModalBtn = styled.button`\n  background-color: #4000c7;\n  text-decoration: none;\n  border: none;\n  padding: 20px;\n  color: white;\n  border-radius: 30px;\n  cursor: grab;\n`;\n\nexport const ModalView = styled.div.attrs((props) => ({\n  // attrs 메소드를 이용해서 아래와 같이 div 엘리먼트에 속성을 추가할 수 있습니다.\n  role: \"dialog\",\n}))`\n  // TODO : Modal창 CSS를 구현합니다.\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  background: #fff;\n  width: 300px;\n  height: 150px;\n  padding: 10px;\n  border-radius: 10px;\n  position: relative;\n  > .close-btn {\n    position: absolute;\n    top: 5px;\n    right: 10px;\n    font-size: 25px;\n    cursor: pointer;\n  }\n`;\n\nexport const Modal = () => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const openModalHandler = () => {\n    // TODO : isOpen의 상태를 변경하는 메소드를 구현합니다.\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <>\n      <ModalContainer>\n        <ModalBtn\n          onClick={openModalHandler}\n          // TODO : 클릭하면 Modal이 열린 상태(isOpen)를 boolean 타입으로 변경하는 메소드가 실행되어야 합니다.\n        >\n          {isOpen ? \"Opened!\" : \"Open Modal\"}\n        </ModalBtn>\n\n        {isOpen ? (\n          <ModalBackdrop onClick={openModalHandler}>\n            <ModalView\n              onClick={(event) => {\n                event.stopPropagation();\n              }}\n            >\n              <div className=\"close-btn\" onClick={openModalHandler}>\n                &times;\n              </div>\n              <div>HELLO CODESTATES!</div>\n            </ModalView>\n          </ModalBackdrop>\n        ) : null}\n      </ModalContainer>\n    </>\n  );\n};\n","import { useState } from \"react\";\nimport styled from \"styled-components\";\n\n// TODO: Styled-Component 라이브러리를 활용해 여러분만의 tag 를 자유롭게 꾸며 보세요!\n\nexport const TagsInput = styled.div`\n  margin: 8rem auto;\n  display: flex;\n  align-items: flex-start;\n  flex-wrap: wrap;\n  min-height: 48px;\n  width: 480px;\n  padding: 0 8px;\n  border: 1px solid rgb(214, 216, 218);\n  border-radius: 6px;\n\n  > ul {\n    display: flex;\n    flex-wrap: wrap;\n    padding: 0;\n    margin: 8px 0 0 0;\n\n    > .tag {\n      width: auto;\n      height: 32px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      color: #fff;\n      padding: 0 8px;\n      font-size: 14px;\n      list-style: none;\n      border-radius: 6px;\n      margin: 0 8px 8px 0;\n      background: #4000c7;\n      > .tag-close-icon {\n        display: block;\n        width: 16px;\n        height: 16px;\n        line-height: 16px;\n        text-align: center;\n        font-size: 14px;\n        margin-left: 8px;\n        color: #4000c7;\n        border-radius: 50%;\n        background: #fff;\n        cursor: pointer;\n      }\n    }\n  }\n\n  > input {\n    flex: 1;\n    border: none;\n    height: 46px;\n    font-size: 14px;\n    padding: 4px 0 0 0;\n    :focus {\n      outline: transparent;\n    }\n  }\n\n  &:focus-within {\n    border: 1px solid #4000c7;\n  }\n`;\n\nexport const Tag = () => {\n  const initialTags = [\"CodeStates\", \"kimcoding\"];\n\n  const [tags, setTags] = useState(initialTags);\n  const removeTags = (indexToRemove) => {\n    // TODO : 태그를 삭제하는 메소드를 완성하세요.\n    setTags(tags.filter((el, index) => index !== indexToRemove));\n  };\n\n  const addTags = (event) => {\n    // TODO : tags 배열에 새로운 태그를 추가하는 메소드를 완성하세요.\n    // 이 메소드는 태그 추가 외에도 아래 3 가지 기능을 수행할 수 있어야 합니다.\n    // - 이미 입력되어 있는 태그인지 검사하여 이미 있는 태그라면 추가하지 말기\n    // - 아무것도 입력하지 않은 채 Enter 키 입력시 메소드 실행하지 말기\n    // - 태그가 추가되면 input 창 비우기\n    if (\n      event.key === \"Enter\" &&\n      !tags.includes(event.target.value) &&\n      event.target.value !== \"\"\n    ) {\n      setTags([...tags, event.target.value]);\n      event.target.value = \"\";\n    }\n  };\n\n  return (\n    <>\n      <TagsInput>\n        <ul id=\"tags\">\n          {tags.map((tag, index) => (\n            <li key={index} className=\"tag\">\n              <span className=\"tag-title\">{tag}</span>\n              <span\n                className=\"tag-close-icon\"\n                onClick={() => removeTags(index)}\n              >\n                x\n              </span>\n            </li>\n          ))}\n        </ul>\n        <input\n          className=\"tag-input\"\n          type=\"text\"\n          onKeyUp={(event) => {\n            addTags(event);\n          }}\n          placeholder=\"Press enter to add tags\"\n        />\n      </TagsInput>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\n\nconst deselectedOptions = [\n  \"rustic\",\n  \"antique\",\n  \"vinyl\",\n  \"vintage\",\n  \"refurbished\",\n  \"신품\",\n  \"빈티지\",\n  \"중고A급\",\n  \"중고B급\",\n  \"골동품\",\n];\n\n/* TODO : 아래 CSS를 자유롭게 수정하세요. */\nconst boxShadow = \"0 4px 6px rgb(32 33 36 / 28%)\";\nconst activeBorderRadius = \"1rem 1rem 0 0\";\nconst inactiveBorderRadius = \"1rem 1rem 1rem 1rem\";\n\nexport const InputContainer = styled.div`\n  margin-top: 8rem;\n  background-color: #ffffff;\n  display: flex;\n  flex-direction: row;\n  padding: 1rem;\n  border: 1px solid rgb(223, 225, 229);\n  border-radius: ${inactiveBorderRadius};\n  z-index: 3;\n  box-shadow: 0;\n\n  &:focus-within {\n    box-shadow: ${boxShadow};\n  }\n\n  > input {\n    flex: 1 0 0;\n    background-color: transparent;\n    border: none;\n    margin: 0;\n    padding: 0;\n    outline: none;\n    font-size: 16px;\n  }\n\n  > div.delete-button {\n    cursor: pointer;\n  }\n`;\n\nexport const DropDownContainer = styled.ul`\n  background-color: #ffffff;\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  list-style-type: none;\n  margin-block-start: 0;\n  margin-block-end: 0;\n  margin-inline-start: 0px;\n  margin-inline-end: 0px;\n  padding-inline-start: 0px;\n  margin-top: -1px;\n  padding: 0.5rem 0;\n  border: 1px solid rgb(223, 225, 229);\n  border-radius: 0 0 1rem 1rem;\n  box-shadow: ${boxShadow};\n  z-index: 3;\n\n  > li {\n    padding: 0 1rem;\n  }\n`;\n\nexport const Autocomplete = () => {\n  /**\n   * Autocomplete 컴포넌트는 아래 3가지 state가 존재합니다. 필요에 따라서 state를 더 만들 수도 있습니다.\n   * - hasText state는 input값의 유무를 확인할 수 있습니다.\n   * - inputValue state는 input값의 상태를 확인할 수 있습니다.\n   * - options state는 input값을 포함하는 autocomplete 추천 항목 리스트를 확인할 수 있습니다.\n   */\n  const [hasText, setHasText] = useState(false);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [options, setOptions] = useState(deselectedOptions);\n\n  // useEffect를 아래와 같이 활용할 수도 있습니다.\n  useEffect(() => {\n    if (inputValue === \"\") {\n      setHasText(false);\n    }\n  }, [inputValue]);\n\n  // TODO : input과 dropdown 상태 관리를 위한 handler가 있어야 합니다.\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n    setHasText(true);\n    setOptions(\n      deselectedOptions.filter((el) => el.includes(event.target.value))\n    );\n\n    /**\n     * handleInputChange 함수는\n     * - input값 변경 시 발생되는 change 이벤트 핸들러입니다.\n     * - input값과 상태를 연결시킬 수 있게 controlled component로 만들 수 있고\n     * - autocomplete 추천 항목이 dropdown으로 시시각각 변화되어 보여질 수 있도록 상태를 변경합니다.\n     *\n     * handleInputChange 함수를 완성하여 아래 3가지 기능을 구현합니다.\n     *\n     * onChange 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 적절하게 변경되어야 합니다.\n     * 2. input값 유무 상태인 hasText가 적절하게 변경되어야 합니다.\n     * 3. autocomplete 추천 항목인 options의 상태가 적절하게 변경되어야 합니다.\n     * Tip : options의 상태에 따라 dropdown으로 보여지는 항목이 달라집니다.\n     */\n  };\n\n  const handleDropDownClick = (clickedOption) => {\n    setInputValue(clickedOption);\n    setOptions([clickedOption]);\n    /**\n     * handleDropDownClick 함수는\n     * - autocomplete 추천 항목을 클릭할 때 발생되는 click 이벤트 핸들러입니다.\n     * - dropdown에 제시된 항목을 눌렀을 때, input값이 해당 항목의 값으로 변경되는 기능을 수행합니다.\n     *\n     * handleInputChange 함수를 완성하여 아래 기능을 구현합니다.\n     *\n     * onClick 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 적절하게 변경되어야 합니다.\n     * 2. autocomplete 추천 항목인 options의 상태가 적절하게 변경되어야 합니다.\n     */\n  };\n\n  const handleDeleteButtonClick = () => {\n    setInputValue(\"\");\n    /**\n     * handleDeleteButtonClick 함수는\n     * - input의 오른쪽에 있는 X버튼 클릭 시 발생되는 click 이벤트 핸들러입니다.\n     * - 함수 작성을 완료하여 input값을 한 번에 삭제하는 기능을 구현합니다.\n     *\n     * handleDeleteButtonClick 함수를 완성하여 아래 기능을 구현합니다.\n     *\n     * onClick 이벤트 발생 시\n     * 1. input값 상태인 inputValue가 빈 문자열이 되어야 합니다.\n     */\n  };\n\n  // Advanced Challenge: 상하 화살표 키 입력 시 dropdown 항목을 선택하고, Enter 키 입력 시 input값을 선택된 dropdown 항목의 값으로 변경하는 handleKeyUp 함수를 만들고,\n  // 적절한 컴포넌트에 onKeyUp 핸들러를 할당합니다. state가 추가로 필요한지 고민하고, 필요 시 state를 추가하여 제작하세요.\n\n  return (\n    <div className=\"autocomplete-wrapper\">\n      <InputContainer>\n        <input\n          type=\"text\"\n          value={inputValue}\n          onChange={handleInputChange}\n        ></input>\n        {/* TODO : input 엘리먼트를 작성하고 input값(value)을 state와 연결합니다. handleInputChange 함수와 input값 변경 시 호출될 수 있게 연결합니다. */}\n        {/* TODO : 아래 div.delete-button 버튼을 누르면 input 값이 삭제되어 dropdown이 없어지는 handler 함수를 작성합니다. */}\n        <div className=\"delete-button\" onClick={handleDeleteButtonClick}>\n          &times;\n        </div>\n      </InputContainer>\n      {hasText ? (\n        <DropDown handleComboBox={handleDropDownClick} options={options} />\n      ) : null}\n    </div>\n  );\n};\n\nexport const DropDown = ({ options, handleComboBox, selected }) => {\n  return (\n    <DropDownContainer>\n      {options.map((option, idx) => {\n        return (\n          <li\n            key={idx}\n            onClick={() => handleComboBox(option)}\n            className={selected === idx ? \"selected\" : \"\"}\n          >\n            {option}\n          </li>\n        );\n      })}\n    </DropDownContainer>\n  );\n};\n","import { useEffect, useState, useRef } from 'react';\nimport styled from 'styled-components';\n\nexport const InputBox = styled.div`\n  text-align: center;\n  display: inline-block;\n  width: 150px;\n  height: 30px;\n  border: 1px #bbb dashed;\n  border-radius: 10px;\n  margin-left: 1rem;\n`;\n\nexport const InputEdit = styled.input`\n  text-align: center;\n  display: inline-block;\n  width: 150px;\n  height: 30px;\n`;\n\nexport const InputView = styled.div`\n  text-align: center;\n  align-items: center;\n  margin-top: 3rem;\n\n  div.view {\n    margin-top: 3rem;\n  }\n`;\n\nexport const MyInput = ({ value, handleValueChange }) => {\n  const inputEl = useRef(null);\n  const [isEditMode, setEditMode] = useState(false);\n  const [newValue, setNewValue] = useState(value);\n\n  useEffect(() => {\n    if (isEditMode) {\n      inputEl.current.focus();\n    }\n  }, [isEditMode]);\n\n  useEffect(() => {\n    setNewValue(value);\n  }, [value]);\n\n  const handleClick = () => {\n    // TODO : isEditMode 상태를 변경합니다.\n  };\n\n  const handleBlur = () => {\n    // TODO : Edit가 불가능한 상태로 변경합니다.\n    handleValueChange(newValue);\n  };\n\n  const handleInputChange = (e) => {\n    // TODO : 저장된 value를 업데이트합니다.\n  };\n\n  return (\n    <InputBox>\n      {isEditMode ? (\n        <InputEdit\n          type='text'\n          value={newValue}\n          ref={inputEl}\n          // TODO : 포커스를 잃으면 Edit가 불가능한 상태로 변경되는 메소드가 실행되어야 합니다.\n          // TODO : 변경 사항이 감지되면 저장된 value를 업데이트 되는 메소드가 실행되어야 합니다.\n        />\n      ) : (\n        <span \n        // TODO : 클릭하면 Edit가 가능한 상태로 변경되어야 합니다.\n        >{newValue}</span>\n      )}\n    </InputBox>\n  );\n}\n\nconst cache = {\n  name: '김코딩',\n  age: 20\n};\n\nexport const ClickToEdit = () => {\n  const [name, setName] = useState(cache.name);\n  const [age, setAge] = useState(cache.age);\n\n  return (\n    <>\n      <InputView>\n        <label>이름</label>\n        <MyInput value={name} handleValueChange={(newValue) => setName(newValue)} />\n      </InputView>\n      <InputView>\n        <label>나이</label>\n        <MyInput value={age} handleValueChange={(newValue) => setAge(newValue)} />\n      </InputView>\n      <InputView>\n        <div className='view'>이름 {name} 나이 {age}</div>\n      </InputView>\n    </>\n  );\n};","import { useState } from \"react\";\nimport styled from \"styled-components\";\n\n// TODO: Styled-Component 라이브러리를 활용해 TabMenu 와 Desc 컴포넌트의 CSS를 구현합니다.\n\nconst TabMenu = styled.ul`\n  background-color: #dcdcdc;\n  color: rgba(73, 73, 73, 0.5);\n  font-weight: bold;\n  display: flex;\n  flex-direction: row;\n  justify-items: center;\n  align-items: center;\n  list-style: none;\n  margin-bottom: 7rem;\n  height: 40px;\n\n  .submenu {\n    display: flex;\n    justify-contents: center;\n    flex-grow: 1;\n    cursor: pointer;\n  }\n\n  .focused {\n    background: blue;\n    color: #fff;\n    height: 100%;\n    disply: flex;\n    align-items: center;\n  }\n\n  & div.desc {\n    text-align: center;\n  }\n`;\n\nconst Desc = styled.div`\n  text-align: center;\n`;\n\nexport const Tab = () => {\n  // TIP: Tab Menu 중 현재 어떤 Tab이 선택되어 있는지 확인하기 위한\n  // currentTab 상태와 currentTab을 갱신하는 함수가 존재해야 하고, 초기값은 0 입니다.\n  const [currentTab, setCurrentTab] = useState(0);\n\n  const menuArr = [\n    { name: \"Tab1\", content: \"Tab menu ONE\" },\n    { name: \"Tab2\", content: \"Tab menu TWO\" },\n    { name: \"Tab3\", content: \"Tab menu THREE\" },\n  ];\n\n  const selectMenuHandler = (index) => {\n    // TIP: parameter로 현재 선택한 인덱스 값을 전달해야 하며, 이벤트 객체(event)는 쓰지 않습니다\n    // TODO : 해당 함수가 실행되면 현재 선택된 Tab Menu 가 갱신되도록 함수를 완성하세요.\n    setCurrentTab(index);\n  };\n\n  return (\n    <>\n      <div>\n        <TabMenu>\n          {/*TODO: 아래 하드코딩된 내용 대신에, map을 이용한 반복으로 코드를 수정합니다.*/}\n          {/*TIP: li 엘리먼트의 class명의 경우 선택된 tab 은 'submenu focused' 가 되며, \n                  나머지 2개의 tab은 'submenu' 가 됩니다.*/}\n          {menuArr.map((el, index) => {\n            return (\n              <li\n                key={index}\n                className={currentTab === index ? \"submenu focused\" : \"submenu\"}\n                onClick={() => selectMenuHandler(index)}\n              >\n                {el.name}\n              </li>\n            );\n          })}\n          ;\n        </TabMenu>\n        <Desc>\n          {/*TODO: 아래 하드코딩된 내용 대신에, 현재 선택된 메뉴 따른 content를 표시하세요*/}\n          <p>{menuArr[currentTab].content}</p>\n        </Desc>\n      </div>\n    </>\n  );\n};\n","import React from 'react';\nimport { Toggle } from './components/BareMinimumRequirements/Toggle';\nimport { Modal } from './components/BareMinimumRequirements/Modal';\nimport { Tag } from './components/BareMinimumRequirements/Tag';\nimport { Autocomplete } from './components/AdvancedChallenges/Autocomplete';\nimport { ClickToEdit } from './components/AdvancedChallenges/ClickToEdit';\nimport { Tab } from './components/BareMinimumRequirements/Tab';\nimport './app.css';\n\nconst App = () => {\n  return (\n    <>\n      <div id='container'>\n        <div id='title'>React Custom Component</div>\n        <div className='box'>\n          <div className='sub_title'>Modal</div>\n          <Modal />\n        </div>\n        <div className='box'>\n          <div className='sub_title'>Toggle</div>\n          <Toggle />\n        </div>\n        <div className='box'>\n          <div className='sub_title'>Tab</div>\n          <Tab />\n        </div>\n        <div className='box'>\n          <div className='sub_title'>Tag</div>\n          <Tag />\n        </div>\n        <div className='box'>\n          <div className='sub_title'>Autocomplete</div>\n          <Autocomplete />\n        </div>\n        <div className='box'>\n          <div className='sub_title'>ClickToEdit</div>\n          <ClickToEdit />\n        </div>\n      </div>\n    </>\n  );\n};\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}